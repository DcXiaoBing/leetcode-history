https://leetcode.com/problems/sorted-gcd-pair-queries/solutions/5875685/c-divisors-counting-and-binary-search-o-n-sqrt-maxelement-easy-to-understand

Intuition
Approach
Count Divisors for Each Element:
We can first find the count how many elements in the array nums are divisible by each number g (from 1 to the maximum element in v, maxx) and lets store them in cntDivisors .
For each element x in nums, we check its divisors (by iterating up to sqrt(x)). For each divisor i, both i and x / i are valid divisors. We increment the divisor count for both.

Count GCD Pairs:
The array gcdCount[g] will store how many pairs in the array nums have GCD equal to g.
For each g starting from maxx and going down to 1, we calculate the number of pairs whose GCD is exactly g. This is done using:
The formula cntDivisors[g] * (cntDivisors[g] - 1) / 2, which gives the number of ways to choose two elements with GCD g.
// Now, Removing duplicate countings...
Then, we subtract the pairs that have a GCD of any multiple of g (to ensure only pairs with GCD exactly equal to g are counted).
This is done using the loop for (int mult = 2 * g; mult <= maxx; mult += g).

Prefix Sum Array:
We create a prefix sum array pref where pref[g] stores the cumulative sum of all gcdCount[g] for g from 1 to g. This helps in efficiently answering the queries.
pref[g] will give the total number of pairs whose GCD is less than or equal to g.

Answering Queries:
For each query q, which represents a rank, we need to find the smallest g such that the number of GCD pairs less than or equal to g is greater than q.
We use binary search on the pref array to find this value. The binary search helps efficiently find the answer without explicitly sorting or storing all the GCD pairs.


class Solution {
  public int[] gcdValues(int[] nums, long[] qs) {
    int n = nums.length, max = 0;
    for (int num : nums) max = Math.max(max, num);

    int factorCnt[] = new int[max + 1];
    for (int num : nums) {
      for (int i = 1; i * i <= num; i++) {
        if (num % i == 0) {
          factorCnt[i]++;
          if (num / i != i) factorCnt[num / i]++;
        }

        // System.out.println(num + " " + i + " " + Arrays.toString(factorCnt));
      }
    }
    // System.out.println(Arrays.toString(factorCnt));

    long[] gcdCnt = new long[max + 1];
    for (int g = max; g >= 1; g--) {
      long cnt = factorCnt[g];
      gcdCnt[g] = cnt * (cnt - 1) / 2;

      for (int multiple = 2 * g; multiple <= max; multiple += g)
        gcdCnt[g] -= gcdCnt[multiple];
    }
    // System.out.println(Arrays.toString(gcdCnt));

    long[] psum = new long[max + 1];
    for (int g = 1; g <= max; g++) psum[g] = psum[g - 1] + gcdCnt[g];
    // System.out.println(Arrays.toString(psum));

    int[] res = new int[qs.length];
    for (int i = 0; i < qs.length; i++) {
      long q = qs[i];
      q++;

      int l = 1, r = max, mid;
      while (l < r) {
        mid = l + (r - l) / 2;

        if (psum[mid] >= q) r = mid;
        else l = mid + 1;
        // System.out.println(q + " " + l + " " + r);
      }
      // System.out.println(q + " " + l);
      res[i] = l;
    }
    return res;
  }
}
