class Solution {
  // adding at front:
  // - this changes the palindrome mapping
  // -
  public String shortestPalindrome(String _s) {
    if (_s == null || _s.length() == 0) return _s;

    char[] s = new char[_s.length() * 2 + 3];
    int n = s.length;

    // make a #c1#c2#...cn# format!
    s[0] = '$';
    s[s.length - 2] = '#';
    s[s.length - 1] = '^';

    for (int i = 0, p = 1; i < _s.length(); i++, p += 2) {
      s[p] = '#';
      s[p + 1] = _s.charAt(i);
    }

    int c = 0, r = 0, rs[] = new int[n];
    int max = 0; // max len of palindrome that can cover 0 idx
    for (int i = 1; i < n - 1; i++) {
      // if current idx is covered by r, we have info to reuse
      int l = 2 * c - i; // symmetric point(palindrome's l and r are similar)

      // since [l,r] is symmetric, so the pal centered at i can be mapped to left part, [l,c]
      // And symmetic center of i is l. So we use rs[l]
      if (i < r) rs[i] = Math.min(rs[l], r - i);
      while (s[i - rs[i]] == s[i + rs[i]]) rs[i]++; // rs[i] is the half-len([l,mid] [mid,r]) for palindrome

      if (i + rs[i] > r) {
        r = i + rs[i];
        c = i;
      }

      if (i - rs[i] == 0) max = Math.max(max, rs[i]);
    }
    // System.out.println(max);

    String suffix = _s.substring(max - 1);
    return new StringBuilder(suffix).reverse().toString() + _s;
  }
}
